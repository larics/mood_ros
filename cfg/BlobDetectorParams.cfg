#!/usr/bin/env python
PACKAGE = "mood_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


gen.add("radius_multiplier",  double_t, 0, "Radius multiplier for the centroid", 0, 1, 500)
gen.add("min_threshold",  double_t, 0, "Minimum threshold when making B/W image", 0, 1, 500)
gen.add("max_threshold",  double_t, 0, "Maximum threshold when making B/W image", 0, 1, 1000)

gen.add("filter_by_area",   bool_t,    0,     "An area filter",  False)
gen.add("min_area",   double_t,    0,     "Minimum area when filter_by_area is True",          0,    1,  100000)
gen.add("max_area",   double_t,    0,     "Maximum area when filter_by_area is True",          0,    1,  100000)

gen.add("filter_by_color",   bool_t,    0,     "A color filter - 0 for dark blobs - 255 for light blobs",  False)
gen.add("blob_color",   int_t,    0,     "Color Intensity",          0,    0,  255)

gen.add("filter_by_circularity",   bool_t,    0,     "A circularity filter (4PI * area / perimeter^2). Circle=1, Square=0.785",  False)
gen.add("min_circularity",   double_t,    0,     "Minimum circularity",          0,    0,  1)
gen.add("max_circularity",   double_t,    0,     "Maximum circularity",          0,    0,  1)

gen.add("filter_by_inertia",   bool_t,    0,     "An inertia filter. Circle=1, Elipse=[0,1], Line=0",  False)
gen.add("min_inertia",   double_t,    0,     "Mminimum Inertia",          0,    0,  1)
gen.add("max_inertia",   double_t,    0,     "Maximum Inertia",          0,    0,  1)

gen.add("filter_by_convexity",   bool_t,    0,     "A convexity filter. (Area of the Blob / Area of its convex hull)",  False)
gen.add("min_convexity",   double_t,    0,     "Mminimum Convexity",          0,    0,  1)
gen.add("max_convexity",   double_t,    0,     "Maximum Convexity",          0,    0,  1)

exit(gen.generate(PACKAGE, "mood_ros", "BlobDetectorParams"))